import numpy as np
import cv2
import matplotlib.pyplot as plt
import os

# Helper function to adjust binary data to the expected size
def adjust_binary_data(binary_data, expected_size):
    binary_array = np.frombuffer(binary_data, dtype=np.uint8)

    if binary_array.size > expected_size:
        # Trim the array if it is larger than the expected size
        binary_array = binary_array[:expected_size]
    elif binary_array.size < expected_size:
        # Pad the array with zeros if it is smaller than the expected size
        binary_array = np.pad(binary_array, (0, expected_size - binary_array.size), mode='constant', constant_values=0)

    return binary_array

# Function to convert binary file back to image
def binary_to_image(binary_file, width=128, height=128):
    try:
        # Read the binary file
        with open(binary_file, 'rb') as file:
            binary_data = file.read()

        # Calculate the expected size
        expected_size = width * height

        # Adjust the binary data to match the expected size
        binary_array = adjust_binary_data(binary_data, expected_size)

        # Reshape the 1D array back to a 2D array (image)
        image = binary_array.reshape((height, width))

        # Ensure the "data" directory exists
        output_dir = "data"
        os.makedirs(output_dir, exist_ok=True)

        # Derive the image file name from the binary file name
        base_name = os.path.splitext(os.path.basename(binary_file))[0]
        image_file = os.path.join(output_dir, f'{base_name}.png')

        # Save the image
        cv2.imwrite(image_file, image)

    # Return the absolute file path
        return os.path.abspath(image_file)

    except Exception as e:
        print(f"Error: {e}")
        return None